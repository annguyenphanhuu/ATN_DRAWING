#!/usr/bin/env python3
"""
Script ƒë·ªÉ convert d·ªØ li·ªáu prediction v·ªÅ d·∫°ng ban ƒë·∫ßu (original format).
Reverse l·∫°i t·∫•t c·∫£ c√°c b∆∞·ªõc preprocessing ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng trong qu√° tr√¨nh train.
"""

import json
import os
import argparse
from prediction_converter import PredictionConverter

def main():
    """Main function to convert predictions back to original format."""
    
    parser = argparse.ArgumentParser(description='Convert AI predictions back to original format')
    parser.add_argument('--input', '-i', 
                       help='Input prediction file or directory', 
                       default='test_results')
    parser.add_argument('--output', '-o', 
                       help='Output directory for converted files', 
                       default='test_results/original_format')
    parser.add_argument('--prepared_data', '-p',
                       help='Path to prepared data file for normalization parameters',
                       default='data/prepared_data_v3.json')
    
    args = parser.parse_args()
    
    print("üîÑ Kh·ªüi t·∫°o Prediction Converter...")
    converter = PredictionConverter(args.prepared_data)
    
    # T·∫°o output directory n·∫øu ch∆∞a c√≥
    os.makedirs(args.output, exist_ok=True)
    
    if os.path.isfile(args.input):
        # Convert single file
        print(f"üìÑ Converting single file: {args.input}")

        # Get drawing ID from file path
        drawing_id, view_name = converter._extract_drawing_info_from_path(args.input)

        if drawing_id and drawing_id != 'unknown':
            # T·∫°o t√™n file an to√†n cho view name
            safe_view_name = view_name.replace(' ', '_').replace('/', '_') if view_name else 'View1'
            output_filename = f"{drawing_id}_{safe_view_name}_DimClient_predicted.json"
        else:
            filename = os.path.basename(args.input)
            output_filename = filename.replace('_prediction.json', '_original_format.json')

        output_path = os.path.join(args.output, output_filename)

        result = converter.convert_prediction_to_original_format(args.input, output_path)
        
        if result:
            print(f"‚úÖ Successfully converted: {output_path}")
            
            # Print summary
            print(f"üìä Conversion Summary:")
            print(f"   View Name: {result.get('ViewName', 'Unknown')}")
            print(f"   Number of predicted lines: {len(result.get('Lines', []))}")

            if result.get('Lines'):
                first_line = result['Lines'][0]
                print(f"   First line coordinates:")
                print(f"     Start: ({first_line['StartPointOrigin']['X']:.6f}, {first_line['StartPointOrigin']['Y']:.6f})")
                print(f"     End: ({first_line['EndPointOrigin']['X']:.6f}, {first_line['EndPointOrigin']['Y']:.6f})")
        else:
            print(f"‚ùå Failed to convert: {args.input}")
    
    elif os.path.isdir(args.input):
        # Convert all files in directory
        print(f"üìÅ Converting all prediction files in: {args.input}")
        
        prediction_files = [f for f in os.listdir(args.input) if f.endswith('_prediction.json')]
        
        if not prediction_files:
            print(f"‚ùå No prediction files found in {args.input}")
            return
        
        converted_count = 0
        total_lines = 0
        
        for filename in prediction_files:
            input_path = os.path.join(args.input, filename)

            # Get drawing ID from file path
            drawing_id, view_name = converter._extract_drawing_info_from_path(input_path)

            if drawing_id and drawing_id != 'unknown':
                # T·∫°o t√™n file an to√†n cho view name
                safe_view_name = view_name.replace(' ', '_').replace('/', '_') if view_name else 'View1'
                output_filename = f"{drawing_id}_{safe_view_name}_DimClient_predicted.json"
            else:
                output_filename = filename.replace('_prediction.json', '_original_format.json')

            output_path = os.path.join(args.output, output_filename)

            print(f"   Converting: {filename} -> {output_filename}")
            result = converter.convert_prediction_to_original_format(input_path, output_path)
            
            if result:
                converted_count += 1
                total_lines += len(result.get('Lines', []))
                print(f"     ‚úÖ {len(result.get('Lines', []))} lines converted")
            else:
                print(f"     ‚ùå Failed")
        
        print(f"\nüéâ Batch Conversion Complete!")
        print(f"   Files converted: {converted_count}/{len(prediction_files)}")
        print(f"   Total dimension lines: {total_lines}")
        print(f"   Output directory: {args.output}")
    
    else:
        print(f"‚ùå Input path not found: {args.input}")

def create_usage_examples():
    """Create a usage examples file."""
    examples = """
# C√°ch s·ª≠ d·ª•ng convert_predictions_to_original.py

## 1. Convert m·ªôt file prediction duy nh·∫•t:
python convert_predictions_to_original.py -i test_results/sample_1_prediction.json -o converted_results

## 2. Convert t·∫•t c·∫£ prediction files trong m·ªôt th∆∞ m·ª•c:
python convert_predictions_to_original.py -i test_results -o converted_results

## 3. S·ª≠ d·ª•ng prepared data file kh√°c:
python convert_predictions_to_original.py -i test_results -o converted_results -p data/prepared_data_v2.json

## 4. Ch·ªâ convert v√† in ra console (kh√¥ng l∆∞u file):
python convert_predictions_to_original.py -i test_results/sample_1_prediction.json

## K·∫øt qu·∫£:
- File output s·∫Ω c√≥ format gi·ªëng nh∆∞ file DimClient g·ªëc
- T·ªça ƒë·ªô ƒë√£ ƒë∆∞·ª£c denormalize v·ªÅ scale ban ƒë·∫ßu
- C√≥ th·ªÉ import tr·ª±c ti·∫øp v√†o h·ªá th·ªëng CAD/Drawing

## C·∫•u tr√∫c file output:
[
  {
    "ViewName": "Drawing View1",
    "Lines": [
      {
        "StartPoint": {"X": ..., "Y": ...},
        "EndPoint": {"X": ..., "Y": ...},
        "StartPointOrigin": {"X": ..., "Y": ...},
        "EndPointOrigin": {"X": ..., "Y": ...},
        "Width": ...,
        "Height": ...,
        "WidthOrigin": ...,
        "HeightOrigin": ...
      }
    ]
  }
]
"""
    
    with open('USAGE_EXAMPLES.md', 'w', encoding='utf-8') as f:
        f.write(examples)
    
    print("üìù Created usage examples file: USAGE_EXAMPLES.md")

if __name__ == '__main__':
    main()
    
    # T·∫°o file h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    if not os.path.exists('USAGE_EXAMPLES.md'):
        create_usage_examples()
